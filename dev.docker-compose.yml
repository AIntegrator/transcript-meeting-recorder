services:
  recorder-worker:
    container_name: recorder-worker
    #build: ./transcript-meeting-recorder
    build: ./
    env_file:
      - .env
    volumes:
      # - .:/transcript-meeting-recorder/attendee
      - .:/attendee
    networks:
      - recorder_network
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379/5
      - DJANGO_SETTINGS_MODULE=attendee.settings.development
    command:
      [
        "/bin/bash",
        "-c",
        "/opt/bin/entrypoint.sh && celery -A attendee worker -l INFO",
      ]

  # attendee-scheduler-local:
  #   build: ./
  #   volumes:
  #    - .:/attendee
  #   networks:
  #     - attendee_network
  #   environment:
  #     - POSTGRES_HOST=postgres
  #     - REDIS_URL=redis://redis:6379/5
  #     - DJANGO_SETTINGS_MODULE=attendee.settings.development
  #   command: ["/bin/bash", "-c", "/opt/bin/entrypoint.sh && python manage.py run_scheduler"]

  recorder-api:
    container_name: recorder-api
    #build: ./transcript-meeting-recorder
    build: ./
    env_file:
      - .env
    volumes:
      # - .:/transcript-meeting-recorder/attendee
      - .:/attendee
    networks:
      - recorder_network
    ports:
      - "8001:8000" # Expose port 8000 of the container to port 8001 on the host
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379/5
      - DJANGO_SETTINGS_MODULE=attendee.settings.development
    command: python manage.py runserver 0.0.0.0:8000

  postgres:
    image: postgres:15.3-alpine
    environment:
      POSTGRES_DB: attendee_development
      POSTGRES_USER: attendee_development_user
      POSTGRES_PASSWORD: attendee_development_user
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    networks:
      - recorder_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    networks:
      - recorder_network
    restart: unless-stopped
    volumes:
      - redis:/data/redis

networks:
  recorder_network:
    driver: bridge

volumes:
  postgres:
  redis:
