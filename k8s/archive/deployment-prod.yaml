apiVersion: apps/v1
kind: Deployment
metadata:
  name: transcript-meeting-recorder-api
  labels:
    app: transcript-meeting-recorder-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: transcript-meeting-recorder-api
  template:
    metadata:
      labels:
        app: transcript-meeting-recorder-api
    spec:
      initContainers:
      - name: migrations
        # Use the same image as your main app, ensure it has `manage.py` and Python
        # Image should be updated to the new Gunicorn-enabled image
        image: vanyabrucker/transcript # base image name from skaffold.yaml
        command: [ "python", "manage.py", "migrate", "--noinput" ] # Added --noinput for automation
        envFrom:
        - configMapRef:
            name: transcript-meeting-recorder-config
        - secretRef:
            name: transcript-secrets
      containers:
      - name: api
        image: vanyabrucker/transcript # base image name from skaffold.yaml
        ports:
        - containerPort: 8000 # Gunicorn will listen on this port
        env:
          - name: GUNICORN_WORKERS
            value: "4"
          - name: GUNICORN_THREADS
            value: "2"
          - name: GUNICORN_TIMEOUT
            value: "120"
          - name: GUNICORN_LOG_LEVEL
            value: "debug"
        envFrom:
        - configMapRef:
            name: transcript-meeting-recorder-config
        - secretRef:
            name: transcript-secrets
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        # *** TODO HIGHLY RECOMMENDED: Add health probes for Gunicorn ***
        #livenessProbe:
        #  httpGet:
        #    path: /healthz # Create this endpoint in your Django app
        #    port: 8000
        #  initialDelaySeconds: 60 # Give Gunicorn time to start and app to load
        #  periodSeconds: 10
        #  timeoutSeconds: 5
        #  failureThreshold: 3
        #readinessProbe:
        #  httpGet:
        #    path: /readyz # Create this endpoint in your Django app (might be more complex)
        #    port: 8000
        #  initialDelaySeconds: 30 # Can be shorter if app starts fast
        #  periodSeconds: 5
        #  timeoutSeconds: 3
        #  failureThreshold: 2
      imagePullSecrets:
        - name: docker-secrets